#! /bin/sh

set -e

get_interface() {
    while read -r int _ ; do
        case $int in
            Inter*|*face)
                # garbage
                ;;
            *)
                printf '%s\n' "${int%:}"
        esac
    done </proc/net/wireless
}

get_vpn() {
    vpn -i && vpn=" $(vpn -c)"
    printf '%s' "${vpn:-  None}"
}

get_song() {
    song=$(song 2>/dev/null)
    case $song in
        ytsearch*|radio.html)
            song=loading...
    esac
    [ "$song" ] && printf '🎵 %s /' "$song"
}

get_ssid() {
    case $(get_interface) in
        eth[0-9]|enp[0-9]s[0-9][0-9])
            essid=Wired
            ;;
        *)
read -r _ _ _ essid <<-EOF
$(iwconfig "$(get_interface)" 2>/dev/null)
EOF
    esac

    case $essid in
        *':off/'*)
            ;;
        *)
            e=
            ssid=${essid%\"*}
            ssid=${ssid#*\"}
    esac
    printf '%s  %s' "${e:-❌}"  "${ssid:-No Internet}"
}

get_link_qual() {
    iwconfig "$(get_interface)" 2>/dev/null | \
    while read -r line ; do
        case $line in
            *'Link Quality'*)
                line=${line%/*}
                line=${line#*=}
                line=$((line * 100 / 70))
                printf '%s%%' $line
                break
        esac
    done
}

get_traffic() {
   int=$(get_interface)
    if [ -f "/sys/class/net/$int/statistics/rx_bytes" ] ; then
        read -r rx <"/sys/class/net/$int/statistics/rx_bytes"
        read -r tx <"/sys/class/net/$int/statistics/tx_bytes"
    fi
    printf ' %s  %s' \
        "$(printf '%s\n' "${rx:-0}" | byteconvert)" \
        "$(printf '%s\n' "${tx:-0}" | byteconvert)"
}

get_traffic() {
   int=$(get_interface)
    if [ -f "/sys/class/net/$int/statistics/rx_bytes" ] ; then
        read -r rx <"/sys/class/net/$int/statistics/rx_bytes"
        read -r tx <"/sys/class/net/$int/statistics/tx_bytes"
    fi
    printf ' %s  %s' \
        "$(printf '%s\n' "${rx:-0}" | byteconvert)" \
        "$(printf '%s\n' "${tx:-0}" | byteconvert)"
}

get_mem() {
    max=$(($(sysctl -n hw.physmem) / 1024 / 1024))

    while read -r _ _ line _ ; do
        used=$line
    done <<-EOF
    $(vmstat)
EOF

    printf ' %s' "${used}" #/${max}
}

get_bat() {
    read -r p </sys/class/power_supply/BAT0/capacity
    read -r s </sys/class/power_supply/AC/online
    case $s in
        1) e='' ;;
        0) case ${p%?} in
               [8-9]|10) e='' ;;
               [6-7]) e='' ;;
               [3-5]) e='' ;;
               [1-2]) e='' ;;
                   *) e=''
           esac
    esac
    printf "$e  %s%%" "$p"
}

get_vol() {
    vol=$(volume)
    case ${vol%??} in
        [7-9]) emoji='' ;;
        [2-6]) emoji='' ;;
            *) emoji=''
    esac
    printf "$emoji %s%%" "$vol"
}

get_space() {
    df -h | while read -r line ; do
        case $line in
            */home)
                set -- $line
                printf ' %s' $4
                break
        esac
    done
}

get_date() {
    printf '%s' "$(date "+(%a) %b %d %I:%M %p")"
}

print_info() {
    D='  '
    printf " %s$D%s$D%s$D%s$D%s$D%s \n" \
        "$(get_ssid)" \
        "$(get_traffic)" \
        "$(get_space)" \
        "$(get_bat)" \
        "$(get_vol)" \
        "$(get_date)"
        # "$(get_mem)" \
}

case $1 in
    -d)
        xsetroot -name "$(print_info)"
        while sleep 1; do
            xsetroot -name "$(print_info)"
        done
        ;;
     *)
         print_info
esac
