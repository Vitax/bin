#!/bin/sh -e
SCRIPTS_DIR=${HOME}/bin/sys

# MODULES
update_time () {
    time=$(printf ' %s\n' "$(clock)")
}

update_date() {
    calendar=$(printf '  %s\n' "$(calendar)")
}

update_network_traffic () {
    nettraffic=$(printf '%s\n' "$(nettraffic)")
}

update_weather () {
    case $net in
        *Offline)
            weather="  No Data"
            ;;
        *)
            weather=$(printf '  %s\n' "$(curl -s 'wttr.in/?format=1' | sed 's/.* //')")
            ;;
    esac
}

update_battery() {
    battery=$(printf '%s\n' "$(${SCRIPTS_DIR}/bat)")
}

update_network() {
    wlan_interface=$(ip addr | grep wlp | cut -d ' ' -f2)
    ssid=$(iw $wlan_interface info | grep ssid | cut -d " " -f2)

    if [ ! -z "$ssid" ]; then
        net="直  $ssid"
    # elif [ ! -z "$lan" ] || [ $lan == 1 ]; then
    #     net="囹Lan"
    else
        net="睊  Offline"
    fi

    net=$(printf '%s\n' "$net")
}

display () {
    xsetroot -name " $weather  $nettraffic  $net  $battery  $time  $calendar"
}

display_lemonbar() {
    printf '%s\n' "%{l} $time  $calendar  %{r} $weather  $nettraffic  $net  $battery "
}

start() {
    # SIGNALLING
    # trap	"<function>;display"		"RTMIN+n"
    # to update it from external commands
    # where m = 34 + n

    # modules that don't update on their own need to be run at
    # the start for getting their initial value
    while true; do
        sleep 1 & wait && {
            # to update item ever n seconds with a offset of m
                    ## [ $((sec % n)) -eq m ] && udpate_item
                    [ $((sec % 30 )) -eq 0 ] && update_time
                    [ $((sec % 180)) -eq 1 ] && update_date
                    [ $((sec % 60)) -eq 1 ] && update_weather
                    [ $((sec % 15 )) -eq 0 ] && update_battery
                    [ $((sec % 5 )) -eq 0 ] && update_network
                    [ $((sec % 5 )) -eq 0 ] && update_network_traffic

            # how often the display updates ( 5 seconds )
            case $1 in
                lemonbar)
                    [ $((sec % 5 )) -eq 0 ] && display_lemonbar
                    ;;
                dwm)
                    [ $((sec % 5 )) -eq 0 ] && display
                    ;;
            esac
            sec=$((sec + 1))
        }
done
}

main() {
    case $1 in
        lemonbar)
            start $1
            ;;
        dwm)
            start $1
            ;;
        *)
            start dwm
            ;;
    esac
}

main "$@"
